[{"/home/swipe/Documents/freeform-editor/src/index.js":"1","/home/swipe/Documents/freeform-editor/src/App.js":"2","/home/swipe/Documents/freeform-editor/src/reportWebVitals.js":"3","/home/swipe/Documents/freeform-editor/src/components/ElementsTab.jsx":"4","/home/swipe/Documents/freeform-editor/src/components/Editor.jsx":"5","/home/swipe/Documents/freeform-editor/src/components/Rectangle.jsx":"6","/home/swipe/Documents/freeform-editor/src/components/Image.jsx":"7","/home/swipe/Documents/freeform-editor/src/components/Text.jsx":"8","/home/swipe/Documents/freeform-editor/src/components/Button.jsx":"9","/home/swipe/Documents/freeform-editor/src/components/Dragabble.jsx":"10"},{"size":500,"mtime":1613112090666,"results":"11","hashOfConfig":"12"},{"size":4258,"mtime":1613388468008,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1613112090666,"results":"14","hashOfConfig":"12"},{"size":723,"mtime":1613112090666,"results":"15","hashOfConfig":"12"},{"size":6666,"mtime":1613382647140,"results":"16","hashOfConfig":"12"},{"size":326,"mtime":1613112090666,"results":"17","hashOfConfig":"12"},{"size":409,"mtime":1613372485397,"results":"18","hashOfConfig":"12"},{"size":315,"mtime":1613372411491,"results":"19","hashOfConfig":"12"},{"size":315,"mtime":1613112090666,"results":"20","hashOfConfig":"12"},{"size":10042,"mtime":1613385845627,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1rt0tws",{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},"/home/swipe/Documents/freeform-editor/src/index.js",[],["47","48"],"/home/swipe/Documents/freeform-editor/src/App.js",["49","50","51"],"import logo from './logo.svg';\nimport './App.css';\nimport { Component } from 'react';\nimport Editor from './components/Editor'\nimport ElementsTab from './components/ElementsTab'\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.addelement=this.addelement.bind(this)\n  }\n  state={\n    elements:{},\n    maxindex:1\n\n}\n  addelement=(value)=>{\n    var count=0\n    for (var c in this.state.elements){\n            count+=1\n    }\n    var elementid=`element-${count}`\n    var newlist=this.state.elements\n    newlist[elementid]={\n        type:value,\n        id:`element-${elementid}`,\n        x:70,\n        y:220,\n        offsetHeight:0,\n        offsetWidth:0,\n        zindex:this.state.maxindex\n\n    }\n    this.setState({\n        elements:newlist\n    })\n    // console.log(this.state)\n\n}\nsetOffset=(elementid,width,height,zindex)=>{\n  var stateelements=this.state.elements\n    stateelements[elementid].offsetWidth=width\n    stateelements[elementid].offsetHeight=height\n    stateelements[elementid].zindex=zindex\n    if(this.state.maxindex<zindex){\n      this.setState({\n        elements:stateelements,\n        maxindex:zindex+1\n      \n      })\n    }\n    else{\n      this.setState({\n        elements:stateelements,\n       \n      \n      })\n    }\n    \n  \n}\nsetInitialOffset=(elementid,width,height)=>{\n  var stateelements=this.state.elements\n  stateelements[elementid].offsetWidth=width\n  stateelements[elementid].offsetHeight=height\n  this.setState({\n    elements:stateelements\n  })\nconsole.log(this.state)\n}\ndoOverlap=(x1,y1,x2,y2,x3,y3,x4,y4)=>{\n  console.log(x1,y1,x2,y2,x3,y3,x4,y4)\n  if(x1>=x4 || x3>=x2){\n    return false\n  }\n  if(y1>=y4 || y3>=y2){\n    return false\n  }\n  return true\n}\nsetZindex=(direction,elementid)=>{\n  console.log(\"setz\")\n  var elements=this.state.elements\n  if(direction===\"forward\"){\n    var max=elements[elementid].zindex\n    for (var element in elements){\n      if(this.doOverlap(elements[elementid].x,elements[elementid].y,elements[elementid].x+elements[elementid].offsetWidth,\n        elements[elementid].y+elements[elementid].offsetHeight,elements[element].x,elements[element].y,elements[element].x+elements[element].offsetWidth,\n        elements[element].y+elements[element].offsetHeight) && elements[element].zindex>max){\n          max=elements[element].zindex\n          \n        }\n    }\n    elements[elementid].zindex=max\n    this.setState({\n      elements:elements\n    })\n    console.log(this.state)\n  }\n  else{\n    var min=elements[elementid].zindex\n    for (var element in elements){\n      console.log(this.doOverlap(elements[elementid].x,elements[elementid].y,elements[elementid].x+elements[elementid].offsetWidth,\n        elements[elementid].y+elements[elementid].offsetHeight,elements[element].x,elements[element].y,elements[element].x+elements[element].offsetWidth,\n        elements[element].y+elements[element].offsetHeight))\n      if(this.doOverlap(elements[elementid].x,elements[elementid].y,elements[elementid].x+elements[elementid].offsetWidth,\n        elements[elementid].y+elements[elementid].offsetHeight,elements[element].x,elements[element].y,elements[element].x+elements[element].offsetWidth,\n        elements[element].y+elements[element].offsetHeight) && elements[element].zindex<min){\n          min=elements[element].zindex\n          \n        }\n    }\n    if(min>=1){\n    elements[elementid].zindex=min-1}\n    else{\n      elements[elementid].zindex=0\n    }\n    console.log(min)\n    this.setState({\n      elements:elements\n    })\n    console.log(this.state)\n  }\n\n}\n  addcoords=(elementid,x,y)=>{\n    var stateelements=this.state.elements\n    stateelements[elementid]['x']=x\n    stateelements[elementid]['y']=y\n    this.setState({\n      elements:stateelements\n    })\n    // console.log(\"app state\")\n    // console.log(this.state)\n  }\n  render(){\n    return (\n      <div class=\"flexbox\">\n        <div classname=\"flexitem\">\n      <ElementsTab addelement={this.addelement} />\n      </div>\n      <div className=\"flexitem\">\n        <Editor elements={this.state.elements} addcoords={this.addcoords} setOffset={this.setOffset} maxindex={this.state.maxindex} setInitialOffset={this.setInitialOffset} setZindex={this.setZindex}/>\n      </div>\n      \n      </div>\n\n    )\n  }\n}\nexport default App;\n","/home/swipe/Documents/freeform-editor/src/reportWebVitals.js",[],"/home/swipe/Documents/freeform-editor/src/components/ElementsTab.jsx",[],"/home/swipe/Documents/freeform-editor/src/components/Editor.jsx",["52"],"import React from 'react'\nimport {Component} from 'react'\nimport Rectangle from './Rectangle'\nimport Image from './Image'\nimport Text from './Text'\nimport Button from './Button'\nimport ReactDOM from 'react-dom'\n\nclass Editor extends Component{\n    \n    state={\n        elements:this.props.elements,\n        verticalline:false,\n        horizontalline:false,\n        leftverticalline:false,\n        rightverticalline:false,\n        centerline:false,\n        leftverticalx:0,\n        rightverticalx:0,\n        centerlinex:0,\n        selected:\"None\"\n       \n      \n    }\n    hidelines=()=>{\n               this.setState({\n            leftverticalline:false,\n            rightverticalline:false,\n            centerline:false,\n            leftverticalx:0,\n            rightverticalx:0,\n            centerlinex:0\n            \n          })\n    }\n    showlines=(leftv,centerv,rightv,leftx,centerx,rightx)=>{\n     //   console.log(\"centers asda\")\n     //   console.log(leftv,centerv,rightv,leftx,centerx,rightx)\n        this.setState({\n            leftverticalline:leftv,\n            rightverticalline:rightv,\n            centerline:centerv,\n            leftverticalx:leftx,\n            rightverticalx:rightx,\n            centerlinex:centerx\n        })\n\n    }\n    // showleftverticalline=(x)=>{\n    //     this.setState({\n    //         leftverticalline:true,\n    //         leftverticalx:x\n            \n    //       })\n    // }\n    // showcenterline=(x)=>{\n    //     this.setState({\n    //         centerline:true,\n    //         centerlinex:x\n            \n    //       })\n    // }\n    // hidecenterline=()=>{\n    //     this.setState({\n    //         centerline:false,\n            \n    //       })\n\n    // }\n    // showrightverticalline=(x)=>{\n    //     this.setState({\n    //         rightverticalline:true,\n    //         rightverticalx:x\n            \n    //       })\n    // }\n    // hideleftverticalline=()=>{\n    //     this.setState({\n    //         leftverticalline:false,\n            \n    //       })\n\n    // }\n    // hiderightverticalline=()=>{\n    //     this.setState({\n    //         rightverticalline:false,\n            \n    //       })\n    // }\n    showhorizontalline=()=>{\n        this.setState({\n            horizontalline:true,\n            \n          })\n    }\n    showverticalline=()=>{\n        this.setState({\n            verticalline:true,\n            \n          })\n    }\n    hidehorizontalline=()=>{\n        this.setState({\n            horizontalline:false,\n            \n          })\n    }\n    hideverticalline=()=>{\n        this.setState({\n            verticalline:false,\n            \n          })\n    }\n    // addcoords=(id,x,y)=>{\n    //     console.log('adcords')\n    //     console.log(this.props)\n    //     this.\n        \n\n    // }\n    goback=()=>{\n        this.props.setZindex(\"backward\",this.state.selected)\n    }\n    gofront=()=>{\n        this.props.setZindex(\"forward\",this.state.selected)\n    }\n    selectElement=(elementid)=>{\n        console.log(\"element id \"+elementid)\n        this.setState({\n            selected:elementid\n        })\n    }\n    renderElements=()=>{\n        \n        \n        var elements=this.state.elements\n        var tags=[]\n        // console.log(elements)\n        for (var element in elements){\n\n            if(elements[element].type===\"text\"){\n                tags.push( <Text id={element} showhorizontal={this.showhorizontalline}  showvertical={this.showverticalline} hidehorizontal={this.hidehorizontalline} hidevertical={this.hideverticalline} addcoords={this.props.addcoords}\n                   setOffset={this.props.setOffset} elements={this.props.elements} showlines={this.showlines} hidelines={this.hidelines} maxindex={this.props.maxindex} selectElement={this.selectElement} setInitialOffset={this.props.setInitialOffset}\n                \n                />)\n            }\n            else if(elements[element].type===\"image\"){\n                tags.push(<Image id={element}  showhorizontal={this.showhorizontalline}  showvertical={this.showverticalline} hidehorizontal={this.hidehorizontalline} hidevertical={this.hideverticalline} addcoords={this.props.addcoords} \n                    setOffset={this.props.setOffset}  elements={this.props.elements}   showlines={this.showlines} hidelines={this.hidelines} maxindex={this.props.maxindex} selectElement={this.selectElement} setInitialOffset={this.props.setInitialOffset}/>)\n\n            }\n            else if(elements[element].type===\"rectangle\"){\n                tags.push(<Rectangle id={element}  showhorizontal={this.showhorizontalline}  showvertical={this.showverticalline} hidehorizontal={this.hidehorizontalline} hidevertical={this.hideverticalline} addcoords={this.props.addcoords}\n                    setOffset={this.props.setOffset}   elements={this.props.elements} showlines={this.showlines} hidelines={this.hidelines} maxindex={this.props.maxindex} selectElement={this.selectElement} setInitialOffset={this.props.setInitialOffset}/>)\n\n            }\n            else if(elements[element].type===\"button\"){\n                tags.push(<Button id={element}  showhorizontal={this.showhorizontalline}  showvertical={this.showverticalline} hidehorizontal={this.hidehorizontalline} hidevertical={this.hideverticalline} addcoords={this.props.addcoords}\n                    setOffset={this.props.setOffset}  elements={this.props.elements} showlines={this.showlines} hidelines={this.hidelines} maxindex={this.props.maxindex} selectElement={this.selectElement} setInitialOffset={this.props.setInitialOffset}/>) \n\n            }\n        }\n        // console.log(tags)\n        return tags\n    }\n    render(){\n        return (<>\n           \n           <div className=\"area\" id=\"area\">\n\n               {this.state.verticalline?\n           <div className=\"verticalcenter\" ></div>:\"\"}\n\n\n                {this.state.horizontalline?<div className=\"horizontalcenter\">\n    \n</div>:\"\"}\n{this.state.leftverticalline?<div className=\"leftvertical\" style={{marginLeft:this.state.leftverticalx}}>\n    \n</div>:\"\"}\n{this.state.rightverticalline?<div className=\"rightvertical\" style={{marginLeft:this.state.rightverticalx}}>\n    \n</div>:\"\"}\n{this.state.centerline?<div className=\"centervertical\" style={{marginLeft:this.state.centerlinex}}>\n    \n</div>:\"\"}\n\n            {this.renderElements()}\n           </div>\n           <div className=\"selected\">\n               <h2> Element Selected <br/>{this.state.selected}</h2>\n               <button className=\"frontbackbuttons\" onClick={this.goback}>Go back</button>\n               <button className=\"frontbackbuttons\" onClick={this.gofront}>bring front</button>\n           </div>\n           </>\n        )\n    }\n}\n\nexport default Editor","/home/swipe/Documents/freeform-editor/src/components/Rectangle.jsx",[],"/home/swipe/Documents/freeform-editor/src/components/Image.jsx",["53"],"import {Component} from 'react'\nimport Draggable from 'react-draggable';\nimport Dragabble from './Dragabble'\nclass Image extends Component{\n    render(){\n        return (\n            \n             <div className=\"image\">\n            <div className={this.props.id} id={this.props.id} > \n            {this.props.id}\n          </div>\n           </div>\n        )\n\n        \n    }\n}\n\nexport default Dragabble(Image)","/home/swipe/Documents/freeform-editor/src/components/Text.jsx",[],"/home/swipe/Documents/freeform-editor/src/components/Button.jsx",[],"/home/swipe/Documents/freeform-editor/src/components/Dragabble.jsx",["54","55","56","57","58","59","60","61"],"import { Component } from \"react\";\nimport DraggableCore from 'react-draggable';\nimport Draggable from 'react-draggable';\nimport React from 'react'\nvar Dragabble=ComposedComponent => class  extends Component{\n\n  \n  constructor(props){\n    super(props)\n    this.myInput = React.createRef()\n  }\n\n  state = {\n    x:70,\n    y:220,\n    \n   id:this.props.id,\n   offsetHeight:0,\n   offsetWidth:0,\n   axis:\"both\",\n   zindex:this.props.elements[this.props.id].zindex+1,\n   max:this.props.maxindex\n   \n   };\n    \n      componentDidMount() {\n        this.props.setInitialOffset(this.props.id,this.myInput.current.offsetWidth,this.myInput.current.offsetHeight)\n        \n      }\n      componentDidUpdate(){\n        console.log(this.props.elements)\n        if(this.state.zindex!=this.props.elements[this.props.id].zindex){\n        this.setState({\n          zindex:this.props.elements[this.props.id].zindex\n        })}\n      }\n    \n      disableDragabble=()=>{\n       // console.log(\"mouseup\")\n        this.setState({\n          Dragabble:false\n        })\n      }\n\n    eventLogger = (e, data) => {\n      // console.log('Event: ', e);\n      // console.log('Data: ', data);\n      this.setState({scale:1})\n      this.props.hidehorizontal()\n      this.props.hidevertical()\n     this.props.hidelines()\n      if(parseInt(data.node.offsetWidth/2)+data.x>173 && parseInt(data.node.offsetWidth/2)+data.x<177){\n        this.props.showvertical()}\n        if(parseInt(data.node.offsetHeight/2)+data.y>248 && parseInt(data.node.offsetHeight/2)+data.y<256){\n          this.props.showhorizontal()}\n          // console.log(\"propsss\")\n          // console.log(this.props.elements)\n        var xdata=data.x;\n          var leftv=false\n          var rightv=false\n          var centerv=false\n          var leftx=0\n          var rightx=0\n          var centerx=0\n        var ydata=data.y\n      //  console.log(this.props.elements)\n      for (var element in this.props.elements){\n      //  console.log(\"events\")\n       // console.log(this.props.elements[element],data.x)\n         if(element!=this.state.id){\n        //  console.log(this.props.elements[element])\n        if(this.props.elements[element].x>data.x-5 && this.props.elements[element].x<data.x+5)//left left\n        {\n         xdata=this.props.elements[element].x\n         ydata=data.y\n        leftv=true\n        leftx=this.props.elements[element].x\n\n        }\n        if(this.props.elements[element].x+this.props.elements[element].offsetWidth>data.x-5 && this.props.elements[element].x+this.props.elements[element].offsetWidth<data.x+5)//left right\n        {\n         xdata=this.props.elements[element].x+this.props.elements[element].offsetWidth\n         ydata=data.y\n         leftv=true\n         leftx=this.props.elements[element].x+this.props.elements[element].offsetWidth\n\n        }\n        if(this.props.elements[element].x+(this.props.elements[element].offsetWidth/2)>data.x-5 && this.props.elements[element].x+(this.props.elements[element].offsetWidth/2)<data.x+5)//left center\n        {\n          xdata=this.props.elements[element].x+(this.props.elements[element].offsetWidth/2)\n          ydata=data.y\n          leftv=true\n          leftx=this.props.elements[element].x+(this.props.elements[element].offsetWidth/2)\n\n        }\n        // console.log(\"rightvertical\")\n        // console.log(this.props.elements[element].x+this.props.elements[element].offsetWidth,data.x+data.node.offsetWidth)\n        if(this.props.elements[element].x+this.props.elements[element].offsetWidth>data.x+data.node.offsetWidth-5 && this.props.elements[element].x+this.props.elements[element].offsetWidth<data.x+data.node.offsetWidth+5   )//right right\n        {\n          xdata=this.props.elements[element].x+this.props.elements[element].offsetWidth-data.node.offsetWidth\n          ydata=data.y\n          rightv=true\n          rightx=this.props.elements[element].x+this.props.elements[element].offsetWidth\n          // this.props.showrightvertical(data.x+data.node.offsetWidth)\n          // this.setState({\n          //   x:data.x+data.node.offsetWidth\n          // })\n          // console.log(\"leftleft\")\n          // console.log(this.state)\n\n        }\n        if(this.props.elements[element].x>data.x+data.node.offsetWidth-5 && this.props.elements[element].x<data.x+data.node.offsetWidth+5 )//right left\n        {\n          xdata= this.props.elements[element].x-data.node.offsetWidth\n          ydata=data.y\n          rightv=true\n          rightx=this.props.elements[element].x\n          // this.props.showrightvertical(data.x+data.node.offsetWidth)\n          // this.setState({\n          //   x:data.x+data.node.offsetWidth\n          // })\n\n        }\n        \n        if(this.props.elements[element].x+(this.props.elements[element].offsetWidth/2)>data.x+data.node.offsetWidth-5 && this.props.elements[element].x+(this.props.elements[element].offsetWidth/2)<data.x+data.node.offsetWidth+5 )//right center\n        {\n          xdata= this.props.elements[element].x+(this.props.elements[element].offsetWidth/2)-data.node.offsetWidth\n          ydata=data.y\n          rightv=true\n\n          rightx=this.props.elements[element].x+(this.props.elements[element].offsetWidth/2)\n          // this.props.showcenterline(data.x+data.node.offsetWidth)\n          // this.setState({\n          //   x:parseInt(data.x+data.node.offsetWidth)\n          // })\n\n        }\n        \n        if(this.props.elements[element].x+((this.props.elements[element].offsetWidth)/2)>(data.x+(data.node.offsetWidth)/2)-5 &&this.props.elements[element].x+((this.props.elements[element].offsetWidth)/2)<(data.x+(data.node.offsetWidth)/2)+5)//center\n        {\n          xdata= this.props.elements[element].x+(this.props.elements[element].offsetWidth)/2-(data.node.offsetWidth/2)\n          ydata=data.y\n          centerv=true\n          centerx=this.props.elements[element].x+((this.props.elements[element].offsetWidth)/2)\n          // console.log('centers')\n          // console.log(this.props.elements[element].x+this.props.elements[element].offsetWidth,data.x+data.node.offsetWidth)\n          // this.props.showcenterline(data.x+(data.node.offsetWidth/2))\n          // this.setState({\n          //   x:parseInt(data.x+(data.node.offsetWidth/2))\n          // })\n          \n\n        }\n        if(data.x>=173 && data.x<179)//left center\n        {\n          xdata=175\n          ydata=data.y\n          // this.props.showcenterline(175)\n          // this.setState({\n          //   x:175\n          // })\n          centerv=true\n          centerx=175\n\n        }\n        \n        if(data.x+data.node.offsetWidth>=173 && data.x+data.node.offsetWidth<=179)//right center\n        {\n          xdata=175-data.node.offsetWidth\n          ydata=data.y\n          // this.props.showcenterline(175)\n          // this.setState({\n          //   x:175\n          // })\n          centerv=true\n          centerx=175\n        }\n        if(data.x+(data.node.offsetWidth/2)>this.props.elements[element].x-5 && data.x+(data.node.offsetWidth/2)<this.props.elements[element].x+5){\n          xdata=this.props.elements[element].x-(data.node.offsetWidth/2)\n          ydata=data.y\n          // this.props.showcenterline(175)\n          // this.setState({\n          //   x:175\n          // })\n          centerv=true\n          centerx=this.props.elements[element].x\n        }\n        if(data.x+(data.node.offsetWidth/2)>this.props.elements[element].x+this.props.elements[element].offsetWidth-5 && data.x+(data.node.offsetWidth/2)<this.props.elements[element].x+this.props.elements[element].offsetWidth+5){\n          xdata=this.props.elements[element].x+this.props.elements[element].offsetWidth-(data.node.offsetWidth/2)\n          ydata=data.y\n          // this.props.showcenterline(175)\n          // this.setState({\n          //   x:175\n          // })\n          centerv=true\n          centerx=this.props.elements[element].x+this.props.elements[element].offsetWidth\n        }\n      }\n        \n      \n      }\n      var axis=\"both\"\n      if(leftv===true || centerv===true || rightv===true){\n        axis=\"none\"\n      }\n      this.setState({\n          x:xdata,\n          y:ydata,\n          axis:axis\n          \n        }) \n        \n      this.props.showlines(leftv,centerv,rightv,leftx,centerx,rightx)\n      \n      \n\n    };\n    stopdrag=()=>{\n      this.props.hidehorizontal()\n      this.props.hidevertical()\n      // this.props.hiderightverticalline()\n      // this.props.hideleftvertical()\n      // this.props.hidecenterline()\n      // console.log(this.props)\n      this.props.hidelines()\n      this.props.addcoords(this.state.id,this.state.x,this.state.y,this.state.offsetHeight,this.state.offsetWidth)\n    }\n    \n    setOffset=(e,data)=>{\n     \n      this.setState({\n        axis:\"both\",\n        zindex:this.props.maxindex+1,\n        \n      })\n      console.log(\"zind \"+this.state.zindex,this.props.maxindex)\n      this.props.setOffset(this.state.id,data.node.offsetWidth,data.node.offsetHeight,this.props.maxindex+1)\n      \n\n    }\n    selectElement=()=>{\n      this.props.selectElement(this.state.id)\n    }\n    \n    render()\n    {\n      \n        const { children } = this.props;\n    const { translateX, translateY, isDragging } = this.state;\n      var x=this.state.x+\"px\"\n      var y=this.state.y+\"px\"\n      var coords={\n        top:x,\n        left:y\n      }\n      // console.log(coords)\n        return (\n\n          <Draggable\n          axis={this.state.axis}\n          position={{x:this.state.x,y:this.state.y}}\n          onStart={this.setOffset}\n          onDrag={this.eventLogger}\n          onStop={this.stopdrag}\n          bounds={{left:0,right:230,top:0,bottom:480}}\n          scale={this.state.scale}\n          \n         \n         >\n            <div className=\"setpos\"  ref={this.myInput} onClick={this.selectElement} style={{zIndex:this.state.zindex}}>\n            \n              \n              \n             <ComposedComponent   {...this.state} {...this.props}\n             \n              />\n             </div>\n              </Draggable>\n            \n        )\n    }\n} \n\nexport default Dragabble\n\n\n\n\n\n\n\n\n\n",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":8,"nodeType":"68","messageId":"69","endLine":1,"endColumn":12},{"ruleId":"66","severity":1,"message":"70","line":18,"column":14,"nodeType":"68","messageId":"69","endLine":18,"endColumn":15},{"ruleId":"71","severity":1,"message":"72","line":101,"column":14,"nodeType":"68","messageId":"73","endLine":101,"endColumn":21},{"ruleId":"66","severity":1,"message":"74","line":7,"column":8,"nodeType":"68","messageId":"69","endLine":7,"endColumn":16},{"ruleId":"66","severity":1,"message":"75","line":2,"column":8,"nodeType":"68","messageId":"69","endLine":2,"endColumn":17},{"ruleId":"66","severity":1,"message":"76","line":2,"column":8,"nodeType":"68","messageId":"69","endLine":2,"endColumn":21},{"ruleId":"77","severity":1,"message":"78","line":32,"column":29,"nodeType":"79","messageId":"80","endLine":32,"endColumn":31},{"ruleId":"77","severity":1,"message":"78","line":70,"column":20,"nodeType":"79","messageId":"80","endLine":70,"endColumn":22},{"ruleId":"66","severity":1,"message":"81","line":248,"column":17,"nodeType":"68","messageId":"69","endLine":248,"endColumn":25},{"ruleId":"66","severity":1,"message":"82","line":249,"column":13,"nodeType":"68","messageId":"69","endLine":249,"endColumn":23},{"ruleId":"66","severity":1,"message":"83","line":249,"column":25,"nodeType":"68","messageId":"69","endLine":249,"endColumn":35},{"ruleId":"66","severity":1,"message":"84","line":249,"column":37,"nodeType":"68","messageId":"69","endLine":249,"endColumn":47},{"ruleId":"66","severity":1,"message":"85","line":252,"column":11,"nodeType":"68","messageId":"69","endLine":252,"endColumn":17},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'c' is assigned a value but never used.","no-redeclare","'element' is already defined.","redeclared","'ReactDOM' is defined but never used.","'Draggable' is defined but never used.","'DraggableCore' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'children' is assigned a value but never used.","'translateX' is assigned a value but never used.","'translateY' is assigned a value but never used.","'isDragging' is assigned a value but never used.","'coords' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]